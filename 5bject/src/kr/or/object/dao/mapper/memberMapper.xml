<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
	<resultMap type="members" id="member-resultmap">
		<id property="id" column="member_id"/>
		<result property="password" column="member_password"/>
		<result property="name" column="member_name"/>
		<result property="month" column="member_month"/>
		<result property="day" column="member_day"/>
		<result property="year" column="member_year"/>
		<result property="gender" column="member_gender"/>
		<result property="emailId" column="member_email_id"/>
		<result property="emailAddress" column="member_email_address"/>
		<result property="phoneNumber" column="member_phone"/>
	</resultMap>
	
	<!-- resultMap 추가 -->
	<resultMap type="upload" id="request-member-resultmap">
		<result property="id" column="request_id"/>
		<result property="requestInfo" column="request_information"/>
		<result property="date" column="request_date"/>
	</resultMap>

	<!--select를 위한 resultMap구문  -->
	<resultMap type="upload" id="select-request-resultmap">
		<result property="id" column="request_id"/>
		<result property="requestInfo" column="request_information"/>
		<result property="date" column="request_date"/>
		<association property="members" javaType="members" resultMap="member-resultmap"/>
	</resultMap>
	
	<sql id="member-sql">
		SELECT	MEMBER_ID, MEMBER_PASSWORD, MEMBER_NAME, MEMBER_MONTH, MEMBER_DAY, MEMBER_YEAR,
				MEMBER_GENDER, MEMBER_EMAIL_ID, MEMBER_EMAIL_ADDRESS, MEMBER_PHONE
	</sql>
	
	<!-- sql upload request -->
	<sql id="request-sql">
				r.request_id, r.request_information, r.request_date, 
				m.member_id, m.member_password, m.member_name, m.member_month,
				m.member_day, m.member_year, m.member_gender, m.member_email_id, m.member_email_address, m.member_phone	
	</sql>

	<sql id="request-sql2">
				request_id, request_information, request_date, 
				member_id, member_password, member_name, member_month,
				member_day, member_year, member_gender, member_email_id, member_email_address, member_phone
	</sql>
	<!-- from request_member r, members m -->
	
	<!--고객목록 페이징처리 추가 -->
	<sql id="member-column">
	MEMBER_ID, MEMBER_PASSWORD, MEMBER_NAME, MEMBER_MONTH, MEMBER_DAY, MEMBER_YEAR,
				MEMBER_GENDER, MEMBER_EMAIL_ID, MEMBER_EMAIL_ADDRESS, MEMBER_PHONE
	</sql>
				
	<insert id="insertMember" parameterType="members">
		INSERT	INTO MEMBERS VALUES
				(#{id}, #{password}, #{name}, #{month}, #{day}, #{year}, #{gender}, #{emailId}, #{emailAddress}, #{phoneNumber})
	</insert>
	
	<!-- request 입력하는 것 추가  -->
	<insert id ="insertRequest" parameterType="upload">
		insert into request_member values (#{id}, #{requestInfo}, #{date})
	</insert>
	
	<delete id="removeMemberById" parameterType="string">
		DELETE	FROM MEMBERS WHERE MEMBER_ID = #{id}
	</delete>
	
	<update id="updateMemberById" parameterType="members">
		UPDATE	MEMBERS SET MEMBER_PASSWORD = #{password}, MEMBER_NAME = #{name}, MEMBER_MONTH = #{month}, MEMBER_DAY = #{day}, MEMBER_YEAR = #{year}, 
				MEMBER_GENDER = #{gender}, MEMBER_EMAIL_ID = #{emailId}, MEMBER_EMAIL_ADDRESS = #{emailAddress}, MEMBER_PHONE = #{phoneNumber}
		WHERE	MEMBER_ID = #{id}
	</update>
	
	<select id="selectMemberById" parameterType="string" resultMap="member-resultmap">
		<include refid="member-sql"/>
		FROM	 MEMBERS
		WHERE	MEMBER_ID = #{id}
	</select>
	
	<select id="selectMembers" parameterType="string" resultMap="member-resultmap">
		<include refid="member-sql"/>
		FROM	MEMBERS
	</select>

	<!-- customer request list -->
	<select id="selectRequests" parameterType="hashmap" resultMap="select-request-resultmap">
		select <include refid ="request-sql2"/> from (select <include refid ="request-sql2"/> 
		, ceil(rownum/#{contentsPerPage}) page
			from (select <include refid ="request-sql"/> from request_member r, members m
			where r.request_id = m.member_id order by r.request_date asc)
		)where page= #{pageNo}
	</select>
	
	<!-- 고객문의요청 페이징 처리 -->
	<select id="selectCountRequests" resultType="_int">
		select count(request_id) from request_member
	</select>
	<!-- 아이디 찾는 SQL문 추가 -->
	<select id = "selectMemberId" parameterType="hashmap" resultType="string">
		SELECT MEMBER_ID FROM MEMBERS 
		WHERE MEMBER_EMAIL_ID = #{emailId} AND MEMBER_EMAIL_ADDRESS = #{emailAddress} AND MEMBER_PHONE=#{phoneNumber}
	</select>
	
	<!-- 비밀번호 찾는 SQL문 추가 -->
	<select id="selectMemberPassword" parameterType="hashmap" resultType="string">
		SELECT MEMBER_PASSWORD FROM MEMBERS
		WHERE MEMBER_ID = #{id} AND MEMBER_EMAIL_ID = #{emailId} AND MEMBER_EMAIL_ADDRESS = #{emailAddress} AND MEMBER_PHONE=#{phoneNumber}
	</select>
	
	<!--  임시비밀번호 바꿔주기 -->
	<select id ="updateMemberPassword" parameterType="hashmap" >
		UPDATE MEMBERS SET MEMBER_PASSWORD=#{newPassword} WHERE MEMBER_ID=#{id}
	</select>

	<!--  고객목록 페이징 처리 -->
	<select id="selectMemberPaging" parameterType="hashmap" resultMap="member-resultmap">
		select <include refid="member-column"/>
			from (
				select <include refid="member-column"/>, ceil(rownum/#{contentsPerPage}) page
				from(
					select <include refid="member-column"/>
					from members
					order by member_id
				)
			)
			where page = #{pageNo}	
	</select>
	<!-- 고객목록 페이징 처리 -->
	<select id="selectCountMembers" resultType="_int">
		select count(member_id) from members
	</select>

</mapper>